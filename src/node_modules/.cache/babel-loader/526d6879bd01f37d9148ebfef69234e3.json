{"ast":null,"code":"import e, { memo as r } from \"react\";\nimport t from \"@anymod/core\";\nimport n from \"@userfront/core\";\n\nconst o = function () {\n  try {\n    return s.isScript1Loading ? Promise.resolve() : Promise.resolve(l()).then(function (e) {\n      return Promise.resolve(m(e)).then(function (e) {\n        return Promise.resolve(a(e)).then(function () {\n          u(), p();\n        });\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      {\n  Singleton: s,\n  alias: c,\n  render: i,\n  processPage: a,\n  addScript1ToDocument: d,\n  createOrReturnPage: l,\n  checkPageAndUpdate: m,\n  executeCallbacks: u,\n  logErrorsAndTips: p\n} = t,\n      {\n  registerUrlChangedEventListener: f,\n  addInitCallback: g\n} = n;\n\nc.setAlias(\"Userfront\"), s.Opts.api = !0, g(_ref => {\n  let {\n    tenantId: e\n  } = _ref;\n  s.External.project = e, d(\"https://cdn.userfront.com/toolkit/page/\", e, o);\n}), f(), \"object\" == typeof window && window.addEventListener(\"urlchanged\", i);\nconst P = {\n  build(_ref2) {\n    let {\n      toolId: t\n    } = _ref2;\n\n    class n extends e.Component {\n      componentDidMount() {\n        !function () {\n          try {\n            try {\n              o();\n            } catch (e) {\n              console.warn(e && e.message ? e.message : \"Problem loading page\", e);\n            }\n\n            Promise.resolve();\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        }();\n      }\n\n      render() {\n        return e.createElement(\"div\", null, e.createElement(\"div\", {\n          id: \"userfront-\" + t\n        }));\n      }\n\n    }\n\n    return r(n);\n  }\n\n};\n\nfor (const e in n) P[e] || (P[e] = n[e]);\n\nexport default P;","map":{"version":3,"mappings":";;;;MAiDeA;AAAAA;AACb,WAAIC,EAAUC,gBAAVD,GAAUC,iBAAVD,GAAUC,gBACKC,GADLD,EACKC,IADLD,CACKC,UAAbC,CAAaD,EAAbC;AAAAA,6BACoBC,EAAmBD,CAAnBC,CADpBD,EACuCA,IADvCA,CACuCA,UAAvCE,CAAuCF,EAAvCE;AAAAA,+BACAC,EAAYD,CAAZC,CADAD,EACYA,IADZA,CACYA;AAClBE,eACAC,GADAD;AACAC,SAHMH;AAGNG,OAJML;AAINK,KALcP,CAAd;AAKAO,GANaT,CAMbS;AAAAA;AAAAA;AAAAA;MAAAA;AAnDIR,aACJA,CAkDAQ;AAnDIC,SAEJA,CAiDAD;AAnDIE,UAGJA,CAgDAF;AAnDIF,eAIJA,CA+CAE;AAnDIG,wBAKJA,CA8CAH;AAnDIN,sBAMJA,CA6CAM;AAnDIJ,sBAOJA,CA4CAI;AAnDID,oBAQJA,CA2CAC;AAnDIA,oBASJA;AA0CAA,IAzCEI;MAAAA;AAEEC,mCAAEA,CAFJD;AAEEE,mBAAmCA;AAFrCF,IAEyDG;;AAC7DN,EAAMO,QAANP,CAAe,WAAfA,GAEAT,EAAUiB,IAAVjB,CAAekB,GAAflB,GAAekB,CAAM,CAFrBT,EAiBAK,EAAgB,QAAGK;AAAAA,MAAH;AAAGA;AAAH,GAAGA;AACjBnB,IAAUoB,QAAVpB,CAAmBqB,OAAnBrB,GAA6BmB,CAA7BnB,EACAW,EACE,yCADFA,EAEEQ,CAFFR,EAGEZ,CAHFY,CADAX;AAIED,CALJe,CAjBAL,EA0BAI,GA1BAJ,EA4BsB,mBAAXa,MAAW,IACpBA,OAAOC,gBAAPD,CAAwB,YAAxBA,EAAsCZ,CAAtCY,CA7BFb;AAkDA,MAAMe,IAAY;AAChBC,eAAQC;AAAAA,QAARD;AAAMC,cAAEA;AAARD,KAAQC;;AACN,UAAMC,CAAN,SAAmBC,EAAMC,SAAzB,CAAyBA;AACvBC;AAAAA;AAAAA;AAXJ;AACE/B;AACA,aAFF,CAEE,OAAOgC,CAAP,EAAOA;AAEPC,sBAAQC,IAARD,CADcD,KAAOA,EAAIG,OAAXH,GAAqBA,EAAIG,OAAzBH,GAAmC,sBACjDC,EAAsBD,CAAtBC;AAAsBD;;AAAAA;AAAAA,WAOpBD,CAPoBC;AAAAA;AAAAA;AAQlBI,SADFL;AAGApB;;AAAAA;AACE,eACEkB,6BACEA;AAAKQ,cAAK,eAAYV;AAAtBE,UADFA,CADF;AAE0BF;;AAPLG;;AAYzB,WAAOQ,EAAKV,CAALU,CAAP;AAAYV;;AAdE,CAAlB;;AAmCA,KAAK,MAAMW,CAAX,IAAmBvB,CAAnB,EACOS,EAAUc,CAAVd,MAAiBA,EAAUc,CAAVd,IAAkBT,EAAKuB,CAALvB,CAAnCS;;AAAwCc","names":["runAnyModSetup","Singleton","isScript1Loading","createOrReturnPage","page","checkPageAndUpdate","updatedPage","processPage","executeCallbacks","logErrorsAndTips","alias","render","addScript1ToDocument","AnyMod","registerUrlChangedEventListener","addInitCallback","Core","setAlias","Opts","api","tenantId","External","project","window","addEventListener","Userfront","build","toolId","Anon","React","Component","componentDidMount","err","console","warn","message","mountTools","id","memo","attr"],"sources":["/Users/AlmightySo/budget-app2/node_modules/@userfront/react/src/index.js"],"sourcesContent":["import React, { memo } from \"react\";\nimport AnyMod from \"@anymod/core\";\nimport Core from \"@userfront/core\";\n\nconst {\n  Singleton,\n  alias,\n  render,\n  processPage,\n  addScript1ToDocument,\n  createOrReturnPage,\n  checkPageAndUpdate,\n  executeCallbacks,\n  logErrorsAndTips,\n} = AnyMod;\n\nconst { registerUrlChangedEventListener, addInitCallback } = Core;\nalias.setAlias(\"Userfront\");\n\nSingleton.Opts.api = true;\n\n/**\n * The order of operations is:\n *  1. Userfront.init() is called\n *  2. Callback is fired that adds Script1 to document and sets Singleton.isScript1Loading = true\n *  3. Userfront.build() is called\n *  4. componentDidMount() is called\n *  5. mountTools() is called\n *  6a. If Script1 hasn't loaded yet, wait for it to load\n *  6b. If Script1 has loaded, continue\n *  7. runAnyModSetup() is called\n */\n\n// Callback to fire whenever Userfront.init is called\naddInitCallback(({ tenantId }) => {\n  Singleton.External.project = tenantId;\n  addScript1ToDocument(\n    \"https://cdn.userfront.com/toolkit/page/\",\n    tenantId,\n    runAnyModSetup\n  );\n});\n\nregisterUrlChangedEventListener();\n\nif (typeof window === \"object\") {\n  window.addEventListener(\"urlchanged\", render);\n}\n\nasync function runAnyModSetup() {\n  if (Singleton.isScript1Loading) return;\n  const page = await createOrReturnPage();\n  const updatedPage = await checkPageAndUpdate(page);\n  await processPage(updatedPage);\n  executeCallbacks();\n  logErrorsAndTips();\n}\n\nasync function mountTools() {\n  try {\n    runAnyModSetup();\n  } catch (err) {\n    let message = err && err.message ? err.message : \"Problem loading page\";\n    console.warn(message, err);\n  }\n}\n\nconst Userfront = {\n  build({ toolId }) {\n    class Anon extends React.Component {\n      componentDidMount() {\n        mountTools();\n      }\n      render() {\n        return (\n          <div>\n            <div id={`userfront-${toolId}`}></div>\n          </div>\n        );\n      }\n    }\n    return memo(Anon);\n  },\n  /**\n   * This is the hook way to do it, which we're not\n   * using because it's not compatible with older\n   * versions of React.\n   */\n  // hook({ tenantId, toolId }) {\n  //   return function Anon() {\n  //     useEffect(() => {\n  //       mount();\n  //     });\n  //     return (\n  //       <div>\n  //         <div id={`userfront-${toolId}`}></div>\n  //       </div>\n  //     );\n  //   };\n  // },\n};\n\nfor (const attr in Core) {\n  if (!Userfront[attr]) Userfront[attr] = Core[attr];\n}\n\nexport default Userfront;\n"]},"metadata":{},"sourceType":"module"}